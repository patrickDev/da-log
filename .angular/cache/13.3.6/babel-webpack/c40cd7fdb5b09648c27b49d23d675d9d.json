{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\n\nfunction RegisterComponent_span_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Email can't be blank.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegisterComponent_span_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Email must be valid.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegisterComponent_span_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Password can't be blank.\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegisterComponent_span_33_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Password must contain @\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction RegisterComponent_span_34_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Password must contain minimum 4 characters\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\n\nconst _c1 = function () {\n  return [\"/login\"];\n};\n/**\n *\n * @param form\n */\n\n\nfunction passwordsMatchValidor(form) {\n  const password = form.get('password');\n  const confirmPassword = form.get('confirmPassword');\n\n  if (password.value !== confirmPassword.value) {\n    confirmPassword.setErrors({\n      passwordsMatch: true\n    });\n  } else {\n    confirmPassword.setErrors(null);\n  }\n\n  return null;\n}\n/**\n * if the data is valid return null else return an object\n */\n\n\nfunction symbolValidator(control) {\n  if (control.hasError('required')) return null;\n  if (control.hasError('minLength')) return null;\n\n  if (control.value.indexOf('@') > -1) {\n    return null;\n  } else {\n    return {\n      symbol: true\n    };\n  }\n}\n\nexport let RegisterComponent = /*#__PURE__*/(() => {\n  class RegisterComponent {\n    constructor(builder) {\n      this.builder = builder;\n    }\n\n    ngOnInit() {\n      this.buildForm();\n    }\n\n    buildForm() {\n      this.registerForm = this.builder.group({\n        name: ['', Validators.required],\n        email: ['', [Validators.required, Validators.email]],\n        username: ['', Validators.required],\n        password: ['', [Validators.required, symbolValidator, Validators.minLength(4)]],\n        confirmPassword: ''\n      }, {\n        validators: passwordsMatchValidor\n      });\n    }\n\n    register() {\n      this.registerForm.value;\n    }\n\n  }\n\n  RegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n    return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n\n  RegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: RegisterComponent,\n    selectors: [[\"app-register\"]],\n    decls: 46,\n    vars: 24,\n    consts: [[1, \"row\"], [1, \"col-md-4\", \"offset-md-4\"], [1, \"card\"], [1, \"card-header\", \"text-center\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"name\"], [\"id\", \"name\", \"formControlName\", \"name\", 1, \"form-control\", 3, \"ngClass\"], [1, \"invalid-feedback\"], [\"for\", \"username\"], [\"id\", \"username\", \"formControlName\", \"username\", 1, \"form-control\", 3, \"ngClass\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"ngClass\"], [4, \"ngIf\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"ngClass\"], [\"for\", \"confirmPassword\"], [\"type\", \"password\", \"id\", \"confirmPassword\", \"formControlName\", \"confirmPassword\", 1, \"form-control\", 3, \"ngClass\"], [1, \"btn\", \"btn-primary\", \"btn-block\", 3, \"disabled\"], [1, \"mt-4\", \"btn\", \"btn-outline-secondary\", \"btn-block\", 3, \"routerLink\"]],\n    template: function RegisterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"h3\");\n        i0.ɵɵtext(5, \"Register Here\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 4)(7, \"form\", 5);\n        i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_7_listener() {\n          return ctx.register();\n        });\n        i0.ɵɵelementStart(8, \"div\", 6)(9, \"label\", 7);\n        i0.ɵɵtext(10, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(11, \"input\", 8);\n        i0.ɵɵelementStart(12, \"span\", 9);\n        i0.ɵɵtext(13, \"Name can't be blank.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(14, \"div\", 6)(15, \"label\", 10);\n        i0.ɵɵtext(16, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 11);\n        i0.ɵɵelementStart(18, \"span\", 9);\n        i0.ɵɵtext(19, \"Username can't be blank.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"div\", 6)(21, \"label\", 12);\n        i0.ɵɵtext(22, \"Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"input\", 13);\n        i0.ɵɵelementStart(24, \"span\", 9);\n        i0.ɵɵtemplate(25, RegisterComponent_span_25_Template, 2, 0, \"span\", 14);\n        i0.ɵɵtemplate(26, RegisterComponent_span_26_Template, 2, 0, \"span\", 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(27, \"div\", 6)(28, \"label\", 15);\n        i0.ɵɵtext(29, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(30, \"input\", 16);\n        i0.ɵɵelementStart(31, \"span\", 9);\n        i0.ɵɵtemplate(32, RegisterComponent_span_32_Template, 2, 0, \"span\", 14);\n        i0.ɵɵtemplate(33, RegisterComponent_span_33_Template, 2, 0, \"span\", 14);\n        i0.ɵɵtemplate(34, RegisterComponent_span_34_Template, 2, 0, \"span\", 14);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(35, \"div\", 6)(36, \"label\", 17);\n        i0.ɵɵtext(37, \"Confirm Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(38, \"input\", 18);\n        i0.ɵɵelementStart(39, \"span\", 9);\n        i0.ɵɵtext(40, \"Passwords must match.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(41, \"button\", 19);\n        i0.ɵɵtext(42, \"Register\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(43, \"div\", 6)(44, \"button\", 20);\n        i0.ɵɵtext(45, \" Login Now\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(13, _c0, ctx.registerForm.get(\"name\").touched && ctx.registerForm.get(\"name\").invalid));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(15, _c0, ctx.registerForm.get(\"username\").touched && ctx.registerForm.get(\"username\").invalid));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(17, _c0, ctx.registerForm.get(\"email\").touched && ctx.registerForm.get(\"email\").invalid));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.registerForm.get(\"email\").hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.registerForm.get(\"email\").hasError(\"email\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(19, _c0, ctx.registerForm.get(\"password\").touched && ctx.registerForm.get(\"password\").invalid));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.registerForm.get(\"password\").hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.registerForm.get(\"password\").hasError(\"symbol\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.registerForm.get(\"password\").hasError(\"minlength\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(21, _c0, ctx.registerForm.get(\"confirmPassword\").touched && ctx.registerForm.get(\"confirmPassword\").invalid));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(23, _c1));\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i2.NgClass, i2.NgIf, i3.RouterLink],\n    styles: [\"\"]\n  });\n  return RegisterComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}